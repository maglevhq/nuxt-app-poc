#!/usr/bin/env node
import readdirGlob from 'readdir-glob'
import path from 'path'
import fs from 'fs'
import Ajv from "ajv"
import { SectionDefinition } from '~~/maglev-core/types'
import { camelize } from '~~/maglev-core/utils'
import SectionJsonSchema from '~~/maglev-core/section-json-schema.json'

console.log("ðŸ‘‹ Hi! We're going to generate the types for your sections")

const ajv = new Ajv({ allowUnionTypes: true })
var fileContent = ''
var definitionMapping: string[] = []

const globber = readdirGlob('./maglev', { pattern: '**/*.schema.json' })
globber.on('match', async (match) => {
  console.log(`----------- ${match.relative} --------------`)
  
  const rawData = await fs.readFileSync(match.absolute, { encoding: 'utf8', flag: 'r' })
  const data = JSON.parse(rawData)

  const valid = ajv.validate(SectionJsonSchema, data)
  console.log(valid ? 'âœ…' : 'ðŸš¨')
  if (!valid) console.log(ajv.errors)

  const sectionDefinition: SectionDefinition = data
  const sectionName = `${camelize(sectionDefinition.id, true)}Section`

  const blockTypes = sectionDefinition.blocks.map(block => `
export type ${sectionName}${camelize(block.type, true)}Block = {
  id: string
  settings: {${block.settings.map(setting => `
    ${setting.id}: CoreTypes.${camelize(setting.type, true)}Setting`).join('')}
  }
}
`).join('')

  const sectionType = `
export type ${sectionName} = CoreTypes.Section & {
  id: string
  settings: {${sectionDefinition.settings.map(setting => `
    ${setting.id}: CoreTypes.${camelize(setting.type, true)}Setting`).join('')}
  }` + (sectionDefinition.blocks.length > 0 ? `
  blocks: (${sectionDefinition.blocks.map(block => `${sectionName}${camelize(block.type, true)}Block`)})[]` : '') + `
}
`
  definitionMapping.push(`
  ${sectionDefinition.id}: {
    settings: {${sectionDefinition.settings.map(setting => `
      ${setting.id}: '${setting.type}'`).join(',')}
    },
    blocks: {${sectionDefinition.blocks.map(block => `
      ${block.type}: {
        settings: {${sectionDefinition.settings.map(setting => `
          ${setting.id}: '${setting.type}'`).join(',')}
        }
      }`).join(',')}
    }
  }`)

  fileContent = fileContent.concat(sectionType, blockTypes)
})
globber.on('end', () => {
  console.log("âœ… Types generated")

  const filepath = './maglev/types.ts'
  const content = `
// Generated by Maglev codegen
import * as CoreTypes from '~~/maglev-core/types'
${fileContent}  

const sectionDefinitionMapping: CoreTypes.SectionDefinitionMapping = {${definitionMapping.join(",")}}

export { sectionDefinitionMapping }
`
  fs.writeFile(filepath, content, (err) => {
    if (err) throw err;    
  })
})
